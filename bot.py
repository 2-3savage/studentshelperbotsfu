import re
import sqlite3

import requests
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.types import ContentType
from aiogram.utils import executor

import KeyBoards
import messages
from config import TOKEN, PAYMENTS_PROVIDER_TOKEN, TIME_MACHINE_IMAGE_URL
from messages import MESSAGES
from utils import Register, Change, Pay, AdminPanel, ScheduleUser, Events


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

PRICE100 = types.LabeledPrice(label='–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 100 –†—É–±–ª–µ–π', amount=10000)
PRICE250 = types.LabeledPrice(label='–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 250 –†—É–±–ª–µ–π', amount=25000)
PRICE500 = types.LabeledPrice(label='–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 500 –†—É–±–ª–µ–π', amount=50000)
PRICE1000 = types.LabeledPrice(label='–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 1000 –†—É–±–ª–µ–π', amount=100000)


@dp.message_handler(state=Events.EVENTS_USER_0)
async def process_admin_command0(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    if switch_text == '–º–µ–Ω—é':
        is_succeed = False
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT user_id FROM admins")
        result_set = cursor.fetchall()
        cursor.close()
        for item in result_set:
            if item[0] == message.from_user.id:
                is_succeed = True
        if is_succeed:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_admin_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()
        else:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_user_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()

    elif switch_text == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(AdminPanel.all()[1])
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
                            ", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è - –º–µ–Ω—é ‚ú®", reply_markup=KeyBoards.return_keyboard)


@dp.message_handler(state=AdminPanel.ADMIN_0)
async def process_admin_command0(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    if switch_text == '–º–µ–Ω—é':
        is_succeed = False
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT user_id FROM admins")
        result_set = cursor.fetchall()
        cursor.close()
        for item in result_set:
            if item[0] == message.from_user.id:
                is_succeed = True
        if is_succeed:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_admin_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()
        else:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_user_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()

    elif switch_text == '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(AdminPanel.all()[1])
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
                            ", —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è - –º–µ–Ω—é ‚ú®", reply_markup=KeyBoards.return_keyboard)


@dp.message_handler(state=AdminPanel.ADMIN_1)
async def process_admin_command1(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    content = message.text
    if switch_text == '–º–µ–Ω—é':
        is_succeed = False
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT user_id FROM admins")
        result_set = cursor.fetchall()
        cursor.close()
        for item in result_set:
            if item[0] == message.from_user.id:
                is_succeed = True
        if is_succeed:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_admin_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()
        else:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_user_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()
    elif message.text != '/start' and switch_text != "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"UPDATE admins SET last_content = '{message.text}' WHERE user_id = '{message.from_user.id}'")
        conn.commit()
        conn.close()
        await state.set_state(AdminPanel.all()[2])
        await message.reply("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?", reply_markup=KeyBoards.yes_or_no_keyboard)


@dp.message_handler(state=AdminPanel.ADMIN_2)
async def process_admin_command1(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    if switch_text == '–º–µ–Ω—é':
        is_succeed = False
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT user_id FROM admins")
        result_set = cursor.fetchall()
        cursor.close()
        for item in result_set:
            if item[0] == message.from_user.id:
                is_succeed = True
        if is_succeed:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_admin_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()
        else:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_user_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()
    elif switch_text == '–¥–∞':
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id FROM users")
        id_users = cursor.fetchall()
        cursor.close()
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT last_content FROM admins WHERE user_id = '{message.from_user.id}'")
        content = cursor.fetchall()
        cursor.close()
        for user in id_users:
            try:
                await dp.bot.send_message(user[0], content[0][0])
            except:
                pass
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(AdminPanel.all()[0])
        await message.reply("–£—Å–ø–µ—à–Ω–æ!", reply_markup=KeyBoards.admin_panel)

    elif switch_text == '–∏–∑–º–µ–Ω–∏—Ç—å':
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(AdminPanel.all()[1])
        await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ‚ú®", reply_markup=KeyBoards.return_keyboard)


@dp.message_handler(state=Pay.PAY_DISTRIBUTOR)
async def process_buy_command0(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    if message.text == '–ú–µ–Ω—é':
        is_succeed = False
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT user_id FROM admins")
        result_set = cursor.fetchall()
        cursor.close()
        for item in result_set:
            if item[0] == message.from_user.id:
                is_succeed = True
        if is_succeed:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_admin_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()
        else:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_user_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()
    elif message.text == '–£–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤':
        await message.reply('‚ú® –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞:\n 1. –®—É–ª—å—Ü –ò–ª—å—è\n 2.–ü—Ä–∏—Å—è–∂–Ω—é–∫ –ö–∏—Ä–∏–ª–ª\n 3.–°—Ç–µ–ø–∞–Ω—Ü–æ–≤ –ê–Ω—Ç–æ–Ω',
                            reply_markup=KeyBoards.developer_support_kb)
    elif message.text == '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞':
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Pay.all()[1])
        await message.reply("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞! üî•"
                            , reply_markup=KeyBoards.developer_support_kb2)


@dp.message_handler(state=Pay.PAY_DISTRIBUTOR2)
async def process_buy_command01(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    if message.text == '–ú–µ–Ω—é':
        state = dp.current_state(user=message.from_user.id)
        await state.reset_state()
        await message.reply("–í—ã –≤ –º–µ–Ω—é ‚ú®", reply_markup=KeyBoards.menu_admin_kb)
    elif switch_text == "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 100 —Ä—É–±–ª–µ–π":
        if PAYMENTS_PROVIDER_TOKEN.split(':')[1] == 'TEST':
            await bot.send_message(message.chat.id, MESSAGES['pre_buy_demo_alert'])
        await bot.send_invoice(message.chat.id,
                               title=MESSAGES['tm_title'],
                               description=MESSAGES['tm_description'],
                               provider_token=PAYMENTS_PROVIDER_TOKEN,
                               currency='rub',
                               photo_url=TIME_MACHINE_IMAGE_URL,
                               photo_height=512,  # !=0/None, –∏–Ω–∞—á–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è
                               photo_width=512,
                               photo_size=512,
                               is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                               prices=[PRICE100],
                               start_parameter='developer-support',
                               payload='some-invoice-payload-for-our-internal-use'
                               )
    elif switch_text == "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 250 —Ä—É–±–ª–µ–π":
        if PAYMENTS_PROVIDER_TOKEN.split(':')[1] == 'TEST':
            await bot.send_message(message.chat.id, MESSAGES['pre_buy_demo_alert'])
        await bot.send_invoice(message.chat.id,
                               title=MESSAGES['tm_title'],
                               description=MESSAGES['tm_description'],
                               provider_token=PAYMENTS_PROVIDER_TOKEN,
                               currency='rub',
                               photo_url=TIME_MACHINE_IMAGE_URL,
                               photo_height=512,  # !=0/None, –∏–Ω–∞—á–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è
                               photo_width=512,
                               photo_size=512,
                               is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                               prices=[PRICE250],
                               start_parameter='developer-support',
                               payload='some-invoice-payload-for-our-internal-use'
                               )
    elif switch_text == "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 500 —Ä—É–±–ª–µ–π":
        if PAYMENTS_PROVIDER_TOKEN.split(':')[1] == 'TEST':
            await bot.send_message(message.chat.id, MESSAGES['pre_buy_demo_alert'])
        await bot.send_invoice(message.chat.id,
                               title=MESSAGES['tm_title'],
                               description=MESSAGES['tm_description'],
                               provider_token=PAYMENTS_PROVIDER_TOKEN,
                               currency='rub',
                               photo_url=TIME_MACHINE_IMAGE_URL,
                               photo_height=512,  # !=0/None, –∏–Ω–∞—á–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è
                               photo_width=512,
                               photo_size=512,
                               is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                               prices=[PRICE500],
                               start_parameter='developer-support',
                               payload='some-invoice-payload-for-our-internal-use'
                               )
    elif switch_text == "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 1000 —Ä—É–±–ª–µ–π":
        if PAYMENTS_PROVIDER_TOKEN.split(':')[1] == 'TEST':
            await bot.send_message(message.chat.id, MESSAGES['pre_buy_demo_alert'])
        await bot.send_invoice(message.chat.id,
                               title=MESSAGES['tm_title'],
                               description=MESSAGES['tm_description'],
                               provider_token=PAYMENTS_PROVIDER_TOKEN,
                               currency='rub',
                               photo_url=TIME_MACHINE_IMAGE_URL,
                               photo_height=512,  # !=0/None, –∏–Ω–∞—á–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–∫–∞–∂–µ—Ç—Å—è
                               photo_width=512,
                               photo_size=512,
                               is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                               prices=[PRICE1000],
                               start_parameter='developer-support',
                               payload='some-invoice-payload-for-our-internal-use'
                               )


@dp.pre_checkout_query_handler(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    print('successful_payment:')
    pmnt = message.successful_payment.to_python()
    for key, val in pmnt.items():
        print(f'{key} = {val}')

    await bot.send_message(
        message.chat.id,
        MESSAGES['successful_payment'].format(
            total_amount=message.successful_payment.total_amount // 100,
            currency=message.successful_payment.currency

        )
    )
    state = dp.current_state(user=message.from_user.id)
    await state.reset_state()
    await message.reply("–í—ã –≤ –º–µ–Ω—é ‚ú®", reply_markup=KeyBoards.menu_admin_kb)


@dp.message_handler(state=Change.CHANGE_0)
async def name_change(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    else:
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"UPDATE users SET real_name = '{message.text}' WHERE chat_id = '{message.from_user.id}'")
        is_succeed = False
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT user_id FROM admins")
        result_set = cursor.fetchall()
        cursor.close()
        for item in result_set:
            if item[0] == message.from_user.id:
                is_succeed = True
        if is_succeed:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_admin_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()
        else:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_user_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()


@dp.message_handler(state=Register.REGISTER_0)
async def register_1(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    else:
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"UPDATE users SET real_name = '{message.text}' WHERE chat_id = '{message.from_user.id}'")
        conn.commit()
        conn.close()
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[1])
        await message.reply(messages.institute_message, reply=False, reply_markup=KeyBoards.institute_kb)


@dp.message_handler(state=Register.REGISTER_1)
async def register_2(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    else:
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"UPDATE users SET school = '{message.text}' WHERE chat_id = '{message.from_user.id}'")
        conn.commit()
        conn.close()
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[2])
        await message.reply(messages.course_message, reply=False, reply_markup=KeyBoards.course_kb)


@dp.message_handler(state=Register.REGISTER_2)
async def register_2(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    else:
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"UPDATE users SET course = '{message.text}' WHERE chat_id = '{message.from_user.id}'")
        conn.commit()
        conn.close()
        state = dp.current_state(user=message.from_user.id)
        switch_text = message.text.lower()
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, school, course FROM users")
        result_set = cursor.fetchall()
        for i in result_set:
            if i[0] == message.from_user.id:
                # –ò–ö–ò–¢
                if i[1] == "–ò–ö–ò–¢" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.ikit_kb)
                elif i[1] == "–ò–ö–ò–¢" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.ikit_kb)
                elif i[1] == "–ò–ö–ò–¢" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.ikit_kb)
                elif i[1] == "–ò–ö–ò–¢" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.ikit_kb)
                elif i[1] == "–ò–ö–ò–¢" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.ikit_kb)
                # –ò–£–ë–ü
                elif i[1] == "–ò–£–ë–ü" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–£–ë–ü" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–£–ë–ü" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–£–ë–ü" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–£–ë–ü" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–§–ë–ò–ë–¢
                elif i[1] == "–ò–§–ë–∏–ë–¢" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ë–∏–ë–¢" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ë–∏–ë–¢" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ë–∏–ë–¢" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ë–∏–ë–¢" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–§–ò–Ø–ö
                elif i[1] == "–ò–§–∏–Ø–ö" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–∏–Ø–ö" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–∏–Ø–ö" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–∏–Ø–ö" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–∏–Ø–ö" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –í–£–¶
                elif i[1] == "–í–£–¶" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–í–£–¶" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–í–£–¶" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–í–£–¶" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–í–£–¶" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ì–ò
                elif i[1] == "–ì–ò" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ì–ò" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ì–ò" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ì–ò" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ì–ò" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–°–ò
                elif i[1] == "–ò–°–ò" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–°–ò" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–°–ò" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–°–ò" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–°–ò" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ù–ò–ì
                elif i[1] == "–ò–ù–∏–ì" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ù–∏–ì" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ù–∏–ì" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ù–∏–ì" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ù–∏–ì" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ê–ò–î
                elif i[1] == "–ò–ê–∏–î" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ê–∏–î" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ê–∏–î" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ê–∏–î" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ê–∏–î" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ì–î–ì–∏–ì
                elif i[1] == "–ò–ì–î–ì–∏–ì" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì–î–ì–∏–ì" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì–î–ì–∏–ì" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì–î–ì–∏–ì" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì–î–ì–∏–ì" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ò–§–∏–†–≠
                elif i[1] == "–ò–ò–§–∏–†–≠" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ò–§–∏–†–≠" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ò–§–∏–†–≠" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ò–§–∏–†–≠" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ò–§–∏–†–≠" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ú–ò–§–ò
                elif i[1] == "–ò–ú–∏–§–ò" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ú–∏–§–ò" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ú–∏–§–ò" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ú–∏–§–ò" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ú–∏–§–ò" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ü–ü–°
                elif i[1] == "–ò–ü–ü–°" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ü–ü–°" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ü–ü–°" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ü–ü–°" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ü–ü–°" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–§–ö–°–ò–¢
                elif i[1] == "–ò–§–ö–°–∏–¢" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ö–°–∏–¢" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ö–°–∏–¢" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ö–°–∏–¢" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ö–°–∏–¢" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–¶–ú–ò–ú
                elif i[1] == "–ò–¶–ú–∏–ú" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¶–ú–∏–ú" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¶–ú–∏–ú" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¶–ú–∏–ú" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¶–ú–∏–ú" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–≠–ò–ì
                elif i[1] == "–ò–≠–∏–ì" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–∏–ì" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–∏–ì" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–∏–ì" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–∏–ì" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ì
                elif i[1] == "–ò–ì" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–¢–ò–°–£
                elif i[1] == "–ò–¢–∏–°–£" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¢–∏–°–£" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¢–∏–°–£" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¢–∏–°–£" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¢–∏–°–£" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–≠–£–ò–§
                elif i[1] == "–ò–≠–£–∏–§" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–£–∏–§" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–£–∏–§" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–£–∏–§" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–£–∏–§" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ü–ò
                elif i[1] == "–ü–ò" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ü–ò" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ü–ò" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ü–ò" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ü–ò" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –Æ–ò
                elif i[1] == "–Æ–ò" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–Æ–ò" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–Æ–ò" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–Æ–ò" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–Æ–ò" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(Register.all()[3])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)

        conn.commit()
        conn.close()


@dp.message_handler(state=Register.REGISTER_3)
async def register_3(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    else:
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"UPDATE users SET user_group = '{message.text}' WHERE chat_id = '{message.from_user.id}'")
        cursor.execute(f"SELECT user_id FROM admins")
        result_set = cursor.fetchall()
        cursor.close()
        is_succeed = False
        for item in result_set:
            if item[0] == message.from_user.id:
                is_succeed = True
        if is_succeed:
            await message.reply(messages.end_of_registration_message
                                , reply=False, reply_markup=KeyBoards.menu_admin_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()
        else:
            await message.reply(messages.end_of_registration_message
                                , reply=False, reply_markup=KeyBoards.menu_user_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()


@dp.message_handler(state=ScheduleUser.SCHEDULE_USER_0)
async def schedule_0(msg: types.Message):
    switch_text = msg.text.lower()
    if msg.text == '/start':
        if msg.from_user.username != None:
            await msg.reply(f'Welcome to StudentHelperBot, {msg.from_user.username}üî•\n'
                            '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                            '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                            '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                            '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                            ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await msg.reply(f'Welcome to StudentHelperBot! üî•\n'
                            '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                            '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                            '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                            '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                            ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=msg.from_user.id)
        await state.set_state(Register.all()[0])
        await msg.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    else:
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"INSERT INTO user_table(chat_id) values ({msg.from_user.id})")
        cursor.execute(f"UPDATE user_table SET school = '{msg.text}' WHERE chat_id = '{msg.from_user.id}'")
        conn.commit()
        conn.close()
        state = dp.current_state(user=msg.from_user.id)
        await state.set_state(ScheduleUser.all()[1])
        await msg.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å üëá', reply=False, reply_markup=KeyBoards.course_kb)


@dp.message_handler(state=ScheduleUser.SCHEDULE_USER_1)
async def schedule_0(message: types.Message):
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    else:
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"UPDATE user_table SET course = '{message.text}' WHERE chat_id = '{message.from_user.id}'")
        conn.commit()
        conn.close()
        state = dp.current_state(user=message.from_user.id)
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, school, course FROM user_table")
        result_set = cursor.fetchall()
        for i in result_set:
            if i[0] == message.from_user.id:
                # –ò–ö–ò–¢
                if i[1] == "–ò–ö–ò–¢" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.ikit_kb)
                elif i[1] == "–ò–ö–ò–¢" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.ikit_kb)
                elif i[1] == "–ò–ö–ò–¢" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.ikit_kb)
                elif i[1] == "–ò–ö–ò–¢" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.ikit_kb)
                elif i[1] == "–ò–ö–ò–¢" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.ikit_kb)
                # –ò–£–ë–ü
                elif i[1] == "–ò–£–ë–ü" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–£–ë–ü" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–£–ë–ü" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–£–ë–ü" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–£–ë–ü" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–§–ë–ò–ë–¢
                elif i[1] == "–ò–§–ë–∏–ë–¢" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ë–∏–ë–¢" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ë–∏–ë–¢" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ë–∏–ë–¢" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ë–∏–ë–¢" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–§–ò–Ø–ö
                elif i[1] == "–ò–§–∏–Ø–ö" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–∏–Ø–ö" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–∏–Ø–ö" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–∏–Ø–ö" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–∏–Ø–ö" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –í–£–¶
                elif i[1] == "–í–£–¶" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–í–£–¶" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–í–£–¶" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–í–£–¶" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–í–£–¶" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ì–ò
                elif i[1] == "–ì–ò" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ì–ò" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ì–ò" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ì–ò" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ì–ò" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–°–ò
                elif i[1] == "–ò–°–ò" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–°–ò" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–°–ò" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–°–ò" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–°–ò" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ù–ò–ì
                elif i[1] == "–ò–ù–∏–ì" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ù–∏–ì" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ù–∏–ì" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ù–∏–ì" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ù–∏–ì" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ê–ò–î
                elif i[1] == "–ò–ê–∏–î" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ê–∏–î" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ê–∏–î" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ê–∏–î" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ê–∏–î" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ì–î–ì–∏–ì
                elif i[1] == "–ò–ì–î–ì–∏–ì" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì–î–ì–∏–ì" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì–î–ì–∏–ì" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì–î–ì–∏–ì" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì–î–ì–∏–ì" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ò–§–∏–†–≠
                elif i[1] == "–ò–ò–§–∏–†–≠" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ò–§–∏–†–≠" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ò–§–∏–†–≠" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ò–§–∏–†–≠" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ò–§–∏–†–≠" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ú–ò–§–ò
                elif i[1] == "–ò–ú–∏–§–ò" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ú–∏–§–ò" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ú–∏–§–ò" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ú–∏–§–ò" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ú–∏–§–ò" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ü–ü–°
                elif i[1] == "–ò–ü–ü–°" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ü–ü–°" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ü–ü–°" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ü–ü–°" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ü–ü–°" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–§–ö–°–ò–¢
                elif i[1] == "–ò–§–ö–°–∏–¢" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ö–°–∏–¢" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ö–°–∏–¢" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ö–°–∏–¢" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–§–ö–°–∏–¢" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–¶–ú–ò–ú
                elif i[1] == "–ò–¶–ú–∏–ú" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¶–ú–∏–ú" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¶–ú–∏–ú" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¶–ú–∏–ú" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¶–ú–∏–ú" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–≠–ò–ì
                elif i[1] == "–ò–≠–∏–ì" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–∏–ì" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–∏–ì" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–∏–ì" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–∏–ì" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–ì
                elif i[1] == "–ò–ì" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–ì" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–¢–ò–°–£
                elif i[1] == "–ò–¢–∏–°–£" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¢–∏–°–£" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¢–∏–°–£" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¢–∏–°–£" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–¢–∏–°–£" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ò–≠–£–ò–§
                elif i[1] == "–ò–≠–£–∏–§" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–£–∏–§" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–£–∏–§" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–£–∏–§" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ò–≠–£–∏–§" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –ü–ò
                elif i[1] == "–ü–ò" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ü–ò" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ü–ò" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ü–ò" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–ü–ò" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                # –Æ–ò
                elif i[1] == "–Æ–ò" and i[2] == "1 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–Æ–ò" and i[2] == "2 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–Æ–ò" and i[2] == "3 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–Æ–ò" and i[2] == "4 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
                elif i[1] == "–Æ–ò" and i[2] == "5 –∫—É—Ä—Å":
                    await state.set_state(ScheduleUser.all()[2])
                    await message.reply(messages.group_message, reply=False, reply_markup=KeyBoards.gi_kb)
        conn.commit()
        conn.close()


@dp.message_handler(state=ScheduleUser.SCHEDULE_USER_2)
async def register_3(message: types.Message):
    global group
    switch_text = message.text.lower()
    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)

    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=message.from_user.id)
        await state.set_state(Register.all()[0])
        await message.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    else:

        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"

        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={message.text}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '1':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '1':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–∞—Ä –Ω–µ—Ç!\n –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await message.reply(timetable_message, parse_mode="HTML")
        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"

        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={message.text}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '2':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–í—Ç–æ—Ä–Ω–∏–∫</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '2':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–í–æ –≤—Ç–æ—Ä–Ω–∏–∫ –ø–∞—Ä –Ω–µ—Ç!\n –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await message.reply(timetable_message, parse_mode="HTML")
        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"

        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={message.text}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '3':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–°—Ä–µ–¥–∞</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '3':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–í —Å—Ä–µ–¥—É –ø–∞—Ä –Ω–µ—Ç!\n –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await message.reply(timetable_message, parse_mode="HTML")
        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"

        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={message.text}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '4':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–ß–µ—Ç–≤–µ—Ä–≥</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '4':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–í —á–µ—Ç–≤–µ—Ä–≥ –ø–∞—Ä –Ω–µ—Ç!\n –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await message.reply(timetable_message, parse_mode="HTML")
        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"

        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={message.text}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '5':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–ü—è—Ç–Ω–∏—Ü–∞</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '5':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–í –ø—è—Ç–Ω–∏—Ü—É –ø–∞—Ä –Ω–µ—Ç!\n –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await message.reply(timetable_message, parse_mode="HTML")
        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"

        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={message.text}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '6':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–°—É–±–±–æ—Ç–∞</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '6':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–í —Å—É–±–±–æ—Ç—É –ø–∞—Ä –Ω–µ—Ç!\n –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await message.reply(timetable_message, parse_mode="HTML")
        is_succeed = False
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT user_id FROM admins")
        result_set = cursor.fetchall()
        cursor.close()
        for item in result_set:
            if item[0] == message.from_user.id:
                is_succeed = True
        if is_succeed:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_admin_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()
        else:
            await message.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                                , reply=False, reply_markup=KeyBoards.menu_user_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=message.from_user.id)
            await state.reset_state()


@dp.message_handler(commands='start')
async def process_start_command(message: types.Message):
    conn = sqlite3.connect('db.db')
    cursor = conn.cursor()
    cursor.execute(f"INSERT INTO users(chat_id, name) values ({message.from_user.id}, '{message.from_user.username}')")
    conn.commit()
    conn.close()

    if message.text == '/start':
        if message.from_user.username != None:
            await message.reply(f'Welcome to StudentHelperBot, {message.from_user.username}üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
        else:
            await message.reply(f'Welcome to StudentHelperBot! üî•\n'
                                '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                                '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                                '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                                '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                                ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)


@dp.message_handler(commands='help')
async def process_start2_command(message: types.Message):
    if message.from_user.username == None:
        await message.reply(f'Welcome to StudentHelperBot! üî•, {message.from_user.username}.\n'
                            '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                            '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                            '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                            '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                            ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)
    else:
        await message.reply(f'Welcome to StudentHelperBot! üî•.\n'
                            '\n - –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üéì'
                            '\n - –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üçª'
                            '\n - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚úâ'
                            '\n - –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ PevCoin\'—ã (–≤–∞–ª—é—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) üíµ'
                            ' \n  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è? ‚ú®', reply_markup=KeyBoards.greet_kb)


@dp.message_handler(state='*', content_types=["text"])
async def handler_message(msg: types.Message):
    global adding
    global group
    switch_text = msg.text.lower()
    if switch_text == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await msg.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", reply_markup=KeyBoards.day_of_the_week_kb)
    elif switch_text == "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, user_group FROM users")
        result_set = cursor.fetchall()
        cursor.close()
        for i in result_set:
            if i[0] == msg.from_user.id:
                group = i[1]
        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={group}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '1':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '1':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–ü–∞—Ä –Ω–µ—Ç!\n –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await msg.reply(timetable_message, parse_mode="HTML")

    elif switch_text == "–≤—Ç–æ—Ä–Ω–∏–∫":
        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, user_group FROM users")
        result_set = cursor.fetchall()
        cursor.close()
        for i in result_set:
            if i[0] == msg.from_user.id:
                group = i[1]
        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={group}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '2':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–í—Ç–æ—Ä–Ω–∏–∫</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '2':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–ü–∞—Ä –Ω–µ—Ç! –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await msg.reply(timetable_message, parse_mode="HTML")

    elif switch_text == "—Å—Ä–µ–¥–∞":
        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, user_group FROM users")
        result_set = cursor.fetchall()
        cursor.close()
        for i in result_set:
            if i[0] == msg.from_user.id:
                group = i[1]
        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={group}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '3':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–°—Ä–µ–¥–∞</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '3':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–ü–∞—Ä –Ω–µ—Ç! –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await msg.reply(timetable_message, parse_mode="HTML")

    elif switch_text == "—á–µ—Ç–≤–µ—Ä–≥":
        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, user_group FROM users")
        result_set = cursor.fetchall()
        cursor.close()
        for i in result_set:
            if i[0] == msg.from_user.id:
                group = i[1]
        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={group}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '4':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–ß–µ—Ç–≤–µ—Ä–≥</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '4':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–ü–∞—Ä –Ω–µ—Ç! –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await msg.reply(timetable_message, parse_mode="HTML")

    elif switch_text == "–ø—è—Ç–Ω–∏—Ü–∞":
        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, user_group FROM users")
        result_set = cursor.fetchall()
        cursor.close()
        for i in result_set:
            if i[0] == msg.from_user.id:
                group = i[1]
        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={group}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '5':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–ü—è—Ç–Ω–∏—Ü–∞</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '5':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–ü–∞—Ä –Ω–µ—Ç! –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await msg.reply(timetable_message, parse_mode="HTML")

    elif switch_text == "—Å—É–±–±–æ—Ç–∞":
        timetable_message = ""
        current_week = "0"
        url = 'https://edu.sfu-kras.ru/timetable'
        response = requests.get(url).text
        match = re.search(r'–ò–¥—ë—Ç\s\w{8}\s–Ω–µ–¥–µ–ª—è', response)
        if match:
            current_week = "1"
        else:
            current_week = "2"
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, user_group FROM users")
        result_set = cursor.fetchall()
        cursor.close()
        for i in result_set:
            if i[0] == msg.from_user.id:
                group = i[1]
        url = (f'http://edu.sfu-kras.ru/api/timetable/get?target={group}')
        response = requests.get(url).json()
        adding = []
        for item in response["timetable"]:
            if item["week"] == current_week:
                adding.append(
                    [item['day'], item['time'], item['subject'], item['type'], item['teacher'], item['place']])
        flag = 0
        for i in adding:
            if i[0] == '6':
                if i[2] != '':
                    flag = 1
        if flag == 1:
            if match:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>–Ω–µ—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            else:
                timetable_message += "–°–µ–π—á–∞—Å –∏–¥—ë—Ç <b>—á—ë—Ç–Ω–∞—è</b> –Ω–µ–¥–µ–ª—è\n"
            timetable_message += '\n\t\t\t\t\t\t\t\t\t<b>–°—É–±–±–æ—Ç–∞</b>\n\t\t~~~~~~~~~~~~~~~~~~~'
            for i in adding:
                if i[0] == '6':
                    if i[4] == '' and i[5] == '':
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]})\n'
                    else:
                        timetable_message += f'\n{i[1]}\n{i[2]} ({i[3]}) \n{i[4]}\n<b>{i[5]}</b>\n'
        else:
            timetable_message += '–ü–∞—Ä –Ω–µ—Ç! –û—Ç–ª–∏—á–Ω—ã–π –ø–æ–≤–æ–¥ —É–≤–∏–¥–µ—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏! üéâ'
        await msg.reply(timetable_message, parse_mode="HTML")
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    elif switch_text == "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        state = dp.current_state(user=msg.from_user.id)
        await state.set_state(Register.all()[0])
        await msg.reply("–ù—É –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üòâ\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

    elif switch_text == "–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT user_id FROM admins")
        result_set = cursor.fetchall()
        cursor.close()
        is_succeed = False
        for item in result_set:
            if item[0] == msg.from_user.id:
                is_succeed = True
        if is_succeed:
            state = dp.current_state(user=msg.from_user.id)
            await state.set_state(AdminPanel.all()[0])
            await msg.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=KeyBoards.admin_panel)
        else:
            await msg.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º", reply_markup=KeyBoards.menu_admin_kb)
    elif switch_text == "–º–µ–Ω—é":
        is_succeed = False
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT user_id FROM admins")
        result_set = cursor.fetchall()
        cursor.close()
        for item in result_set:
            if item[0] == msg.from_user.id:
                is_succeed = True
        if is_succeed:
            await msg.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                            , reply=False, reply_markup=KeyBoards.menu_admin_kb)
            conn.commit()
            conn.close()
            state = dp.current_state(user=msg.from_user.id)
            await state.reset_state()
        else:
            await msg.reply('–í—ã –≤ –º–µ–Ω—é! ‚ú®'
                            , reply=False, reply_markup=KeyBoards.menu_user_kb)
            conn.commit()
            conn.close()

    elif switch_text == "—Ä–∞—Å—Å—ã–ª–∫–∏":
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, user_group FROM users")
        result_set = cursor.fetchall()
        cursor.close()
        for i in result_set:
            if i[0] == msg.from_user.id:
                group = i[1]
        printing = ''
        if group == "–ö–ò20-17/1–± (1 –ø–æ–¥–≥—Ä—É–ø–ø–∞)":
            with open("ki20171b.txt", encoding="UTF-8") as file:
                file_spl = file.read()
                file_sp = file_spl.split(' | ')
                for i in range(len(file_sp)):
                    printing += f'\t{i + 1}. {file_sp[i]}\n'
        await msg.reply(f"5 –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ ‚úâ:\n\n{printing}", reply_markup=KeyBoards.mailing_lists_kb)

    elif switch_text == "–ø—Ä–æ—Ñ–∏–ª—å":
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, real_name, user_group FROM users")
        result_set = cursor.fetchall()
        for i in result_set:
            if i[0] == msg.from_user.id:
                await bot.send_message(msg.from_user.id, f"–í–∞—à–µ –§–ò–û: {i[1]}\n"
                                                         f"–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {i[2]}")
        conn.commit()
        conn.close()
    elif switch_text == "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await msg.reply("–í—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ‚öô", reply_markup=KeyBoards.setting_kb)

    elif switch_text == "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        await msg.reply("–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üéÇ ", reply_markup=KeyBoards.events_kb)

    elif switch_text == "–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é":
        await msg.reply("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üëá", reply_markup=KeyBoards.change_information_kb)

    elif switch_text == "–¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
        state = dp.current_state(user=msg.from_user.id)
        await state.set_state(Events.all()[0])
        await msg.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ üçª", reply_markup=KeyBoards.universal_kb)

    elif switch_text == "–Ω–∞–∑–∞–¥":
        await msg.reply("–í—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö ‚öô", reply_markup=KeyBoards.setting_kb)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    elif switch_text == "–∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, real_name FROM users")
        result_set = cursor.fetchall()
        for i in result_set:
            if i[0] == msg.from_user.id:
                await bot.send_message(msg.from_user.id, f"–í–∞—à–µ –§–ò–û: {i[1]}\n")
        conn.commit()
        conn.close()
        state = dp.current_state(user=msg.from_user.id)
        await state.set_state(Change.all()[0])
        await bot.send_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û üëá")
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    elif switch_text == "–∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
        conn = sqlite3.connect('db.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT chat_id, user_group, school, course FROM users")
        result_set = cursor.fetchall()
        for i in result_set:
            if i[0] == msg.from_user.id:
                await bot.send_message(msg.from_user.id,
                                       f"–í–∞—à –∏–Ω—Å—Ç–∏—Ç—É—Ç: {i[2]}\n–í–∞—à –∫—É—Ä—Å: {i[3]}\n–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {i[1]}\n")
        conn.commit()
        conn.close()
        state = dp.current_state(user=msg.from_user.id)
        await state.set_state(Register.all()[1])
        await msg.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∏–Ω—Å—Ç–∏—Ç—É—Ç üëá", reply_markup=KeyBoards.institute_kb)

    elif switch_text == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã":
        await msg.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç: üéì", reply_markup=KeyBoards.institute_kb)
        state = dp.current_state(user=msg.from_user.id)
        await state.set_state(ScheduleUser.all()[0])

    elif switch_text == "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤":
        state = dp.current_state(user=msg.from_user.id)
        await state.set_state(Pay.all()[0])
        await msg.reply("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –≤–∞–º, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∏—Ö —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞. –°–ø–∞—Å–∏–±–æ –≤–∞–º! üòò"
                        , reply_markup=KeyBoards.developer_support_kb)


if __name__ == "__main__":
    executor.start_polling(dp, on_shutdown=shutdown)
